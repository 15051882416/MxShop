"""
Django settings for MxShop project.

Generated by 'django-admin startproject' using Django 1.11.3.

For more information on this file, see
https://docs.djangoproject.com/en/1.11/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/1.11/ref/settings/
"""

import os
import sys
import datetime
import dotenv


# Build paths inside the project like this: os.path.join(BASE_DIR, ...)
BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))
sys.path.insert(0, BASE_DIR)
sys.path.insert(0, os.path.join(BASE_DIR, 'apps'))
sys.path.insert(0, os.path.join(BASE_DIR, 'extra_apps'))

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/1.11/howto/deployment/checklist/

dotenv.read_dotenv(os.path.join(BASE_DIR), '.env')
# SECURITY WARNING: keep the secret key used in production secret!
try:
    SECRET_KEY = os.environ['SECRET_KEY']
    ENVIRONMENT = os.environ['ENVIRONMENT']
except:
    SECRET_KEY = '_2_#8g2d-(ut(-ol@f6r=m!b61&wd4j-p23=&_psjdzs-#k%$$'
# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = os.environ.get('DEBUG', False)

ALLOWED_HOSTS = ['*']

AUTH_USER_MODEL = 'users.UserProfile'   # 使用UserProfile 替换系统User表


# Application definition

INSTALLED_APPS = [
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'users.apps.UsersConfig',
    'DjangoUeditor',
    'goods.apps.GoodsConfig',
    'user_operation.apps.UserOperationConfig',
    'trade.apps.TradeConfig',
    'crispy_forms',
    'xadmin',
    'rest_framework',
    'django_filters',   # drf 过滤
    'corsheaders',   # 跨域设置
    'rest_framework.authtoken',  # 设置TokenAuthentication, 有数据表
    'djcelery',
    'raven.contrib.django.raven_compat',   # sentry日志收集app
]

MIDDLEWARE = [
    'corsheaders.middleware.CorsMiddleware',             # 跨域中间键设置
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.locale.LocaleMiddleware',   # 国际化
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',

]
CORS_ORIGIN_ALLOW_ALL = True     # 跨域设置

ROOT_URLCONF = 'MxShop.urls'    # 系统url设置

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [os.path.join(BASE_DIR, 'templates')],  # 模板路径设置
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'MxShop.wsgi.application'


# Database
# https://docs.djangoproject.com/en/1.11/ref/settings/#databases

DB_NAME = os.environ['DB_NAME']
DB_USER = os.environ['DB_USER']
DB_PASSWORD = os.environ['DB_PASSWORD']
DB_HOST = os.environ['DB_HOST']
DB_PORT = os.environ['DB_PORT']

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.mysql',
        'NAME': DB_NAME,
        'USER': DB_USER,
        'PASSWORD': DB_PASSWORD,
        'HOST': DB_HOST,
        'PORT': DB_PORT,
        'OPTIONS': {'init_command': 'SET default_storage_engine=INNODB;'}  # 设置MySQL引擎 INNODB
    }
}




# Password validation
# https://docs.djangoproject.com/en/1.11/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/1.11/topics/i18n/

# 设置时区，语言,国际化
# LANGUAGE_CODE = 'en-us'
LANGUAGE_CODE = 'zh-Hans'
TIME_ZONE = 'Asia/Shanghai'

USE_I18N = True

USE_L10N = True

USE_TZ = True

LANGUAGES = (
    ('en', ('English')),
    ('zh-Hans', ('中文简体')),
    ('zh-Hant', ('中文繁體')),
)

# 翻译文件所在目录，需要手工创建
LOCALE_PATHS = (
    os.path.join(BASE_DIR, 'locale'),
)

# 自定义用户验证
AUTHENTICATION_BACKENDS = (
    'users.views.CustomBackend',
)

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/1.11/howto/static-files/

ENVIRONMENT = os.environ['ENVIRONMENT']
STATIC_URL = '/static/'
# 配置静态文件路径
# if ENVIRONMENT == 'local':
#     STATICFILES_DIRS = (
#         os.path.join(BASE_DIR, 'static'),
#     )
# else:
#     STATIC_ROOT = os.path.join(BASE_DIR, "static/")
STATIC_ROOT = os.path.join(BASE_DIR, "static/")
# 图片上传配置
MEDIA_URL = '/media/'
MEDIA_ROOT = os.path.join(BASE_DIR, 'media')

REST_FRAMEWORK = {
    # 'DEFAULT_FILTER_BACKENDS': ('django_filters.rest_framework.DjangoFilterBackend',),  # 精确字段过滤默认配置
    'DEFAULT_AUTHENTICATION_CLASSES': (
        'rest_framework.authentication.BasicAuthentication',
        'rest_framework.authentication.SessionAuthentication',
        # 公共数据不需要验证token,所以不能设置全局的token，要在需要验证View中设置，详见goods.GoodsListViewSet
        'rest_framework_jwt.authentication.JSONWebTokenAuthentication',  # drf JWT 提供验证 并将user取出来
        # 'rest_framework.authentication.TokenAuthentication',   # drf提供Token验证  通过request.auth 即可获取用户的请求token
    ),
    # 'DEFAULT_PAGINATION_CLASS': 'rest_framework.pagination.PageNumberPagination',    # 默认分页
    # 'PAGE_SIZE': 10    # 默认分页数据

    # 访问速率限速配置
    # 需要在ViewSet中配置 throttle_classes = (UserRateThrottle, AnonRateThrottle)   # 访问限速
    'DEFAULT_THROTTLE_CLASSES': (
        'rest_framework.throttling.AnonRateThrottle',    # 用户没有登录的情况下
        'rest_framework.throttling.UserRateThrottle'     # 用户登录的情况下
    ),
    'DEFAULT_THROTTLE_RATES': {
        'anon': '500/hour',  # 1小时内访问次数不超过2000次 # second, minute, hour or day
        'user': '2000/hour'
    }

}

# django-rest-framework-jwt github
# 配置JWT参数
JWT_AUTH = {
    'JWT_EXPIRATION_DELTA': datetime.timedelta(days=7),
    'JWT_AUTH_HEADER_PREFIX': 'JWT',
}

# 云片网设置 手机号码正则表达式
MOBILE_REGEX = r"^((13[0-9])|(14[5,7])|(15[0-3,5-9])|(17[0,3,5-8])|(18[0-9])|166|198|199|(147))\d{8}$"
APIKEY = 'd6c4ddbf50ab36611d2f52041a0b949e'


# 支付宝相关配置
PRIVATE_KEY_PATH = os.path.join(BASE_DIR, 'apps/trade/keys/private_2048.txt')
ALI_PUB_KEY_PATH = os.path.join(BASE_DIR, 'apps/trade/keys/alipay_key_2048.txt')  # 支付宝的公钥，验证支付宝回传消息使用，不是你自己的公钥,
ALI_APPID = "2016092200571749"
APP_NOTIFY_URL = "http://www.dayushu.top:8000/alipay/return/"  # 异步接口，当用户完成支付，会返回支付结果
RETURN_URL = "http://www.dayushu.top:8000/alipay/return/"  # 用户完成支付跳转的url
ALI_DEBUG = True    # 默认False,

# Celery 设置
from .celery_config import *

BROKER_BACKEND = 'redis'
BROKER_URL = 'redis://localhost:6379/1'
CELERY_RESULT_BACKEND = 'redis://localhost:6379/2'


# drf 缓存设置，基于内存基础，重启失效
# 注意CacheResponseMixin 要放到ViewSet继承类的第一个
REST_FRAMEWORK_EXTENSIONS = {
    'DEFAULT_CACHE_RESPONSE_TIMEOUT': 20    # 设置缓存时间单位秒
}


# redis缓存配置
CACHES = {
    "default": {
        "BACKEND": "django_redis.cache.RedisCache",
        # "LOCATION": "redis://密码@127.0.0.1:6379/3",  # 有密码使用这种
        "LOCATION": "redis://localhost:6379/1",        # 无密码使用这种
        "OPTIONS": {
            "CLIENT_CLASS": "django_redis.client.DefaultClient",
        },
    },
}


# 配置sentry日志收集服务器
RAVEN_CONFIG = {
    'dsn': 'http://1cde83fb411f46aab457d589767494a6:29d4aefe7bb745da837bc88bcee14de2@dayushu.top:9000/2',
}





#获取用户IP方法
# request.META.get('REMOTE_ADDR')



